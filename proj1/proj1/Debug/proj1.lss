
AVRASM ver. 2.2.7  F:\Information Technology Materials\9032_Microprocessors and Interfacing\project\proj1\proj1\main.asm Thu Nov 21 03:22:53 2019

[builtin](2): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\Atmel\ATmega_DFP\1.3.300\avrasm\inc\m2560def.inc'
F:\Information Technology Materials\9032_Microprocessors and Interfacing\project\proj1\proj1\main.asm(24): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\Atmel\ATmega_DFP\1.3.300\avrasm\inc\m2560def.inc'
[builtin](2): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\Atmel\ATmega_DFP\1.3.300\avrasm\inc\m2560def.inc'
F:\Information Technology Materials\9032_Microprocessors and Interfacing\project\proj1\proj1\main.asm(24): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\Atmel\ATmega_DFP\1.3.300\avrasm\inc\m2560def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; proj1.asm
                                 ;
                                 ; Created: 11/14/2019 12:36:54 PM
                                 ; Author: Shaoyang Zhang
                                 ; Function: This program simulates a window shade control system, 
                                 ; where having 4 Windows and each window has 4 opaque levels, i.e. 0-3.
                                 ; there are 4 control mode: Initial(S), Local(L), Central(C) and Emergency(!!)
                                 ; The program takes input as control from keypad and displays the window status
                                 ; on the LED bar and display.
                                 ;
                                 
                                 ; Port C -> LCD data (D0-D7) to PORTC0-7
                                 ; Port A -> LCD control
                                 ; PE3(PE5) -> LED0-1
                                 ; PE4(PE2) -> LED2-3
                                 ; PE5(PE3) -> LED4-5
                                 ; PH5(PH8) -> LED6-7 
                                 ; Port L -> Keypad, high 4 bits for column selection, low four bits for reading rows.
                                 ; PL7-4 to R0-3, PL3-0 to C0-3.
                                 ; Port D -> Button push (PB0-1) as well as INT0-1
                                 
                                 ; Replace with your application code
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .def row   = r16				; current row number
                                 .def col   = r17				; current column number
                                 .def rmask = r18				; mask for current row during scan
                                 .def cmask = r19				; mask for current column during scan
                                 .def temp1 = r20  
                                 .def temp2 = r21
                                 .def lcd_temp = r22				; register to store the lcd data / command
                                 .def win_busy = r23				; r25:r24 is used to do the counter increment
                                 
                                 .equ PORTLDIR =0xF0			; use PortL for input/output from keypad: PL7-4, output, PL3-0, input
                                 .equ INITCOLMASK = 0xEF		; scan from the leftmost column C0, the value to mask output
                                 .equ INITROWMASK = 0x01		; scan from the bottom row R0
                                 .equ ROWMASK  =0x0F			; low four bits are output from the keypad. This value mask the high 4 bits.
                                 
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 
                                 .equ WIN_NUM = 4
                                 
                                 .equ DIM_LVL0 = 0
                                 .equ DIM_LVL1 = 16
                                 .equ DIM_LVL2 = 80
                                 .equ DIM_LVL3 = 255
                                 
                                 .equ W1_ADDR = 0xC4
                                 .equ W2_ADDR = 0xC7
                                 .equ W3_ADDR = 0xCA
                                 .equ W4_ADDR = 0xCD
                                 .equ MODE_ADDR = 0x81
                                 
                                 .equ TIMER_1S = 500			; Timer1,3,4,5 under compare mode, OVF = 256*2*64/16,000,000 = 2048us thus num = 1s / 2048us = 500
                                 
                                 ; Define variables
                                 .dseg
                                 .org 0x200
                                 Windows:
000200                           	.byte WIN_NUM
                                 Mode:
000204                           	.byte 2
                                 Counter1:
000206                           	.byte 2
                                 Counter2:
000208                           	.byte 2
                                 Counter3:
00020a                           	.byte 2
                                 Counter4:
00020c                           	.byte 2
                                 
                                 ; Initial program memory
                                 .cseg
                                 .org 0x0000
000000 940c 0307                 	jmp RESET
                                 
                                 .org INT0addr
000002 940c 0069                 	jmp EXT_INT0
                                 .org INT1addr
000004 940c 011a                 	jmp EXT_INT1
                                 
                                 .org OVF1addr	; Jump to the interrupt handler for Timer1 overflow
000028 940c 01cb                 	jmp Timer1OVF
                                 .org OVF3addr
000046 940c 021a                 	jmp Timer3OVF
                                 .org OVF4addr
00005a 940c 0269                 	jmp Timer4OVF
                                 .org OVF5addr
000064 940c 02b8                 	jmp Timer5OVF
                                 
                                 ; Initial constant value
                                 WINS_INI:
000066 0000
000067 0000                      	.db 0, 0, 0, 0	;take 4 bytes
                                 MODE_INI:
000068 3a53                      	.db "S:"
                                 
                                 ; Define macros
                                 .macro do_lcd_command
                                 	ldi lcd_temp, @0
                                 	rcall lcd_command
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_command_reg
                                 	mov lcd_temp, @0
                                 	rcall lcd_command
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_data
                                 	ldi lcd_temp, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_data_reg
                                 	mov lcd_temp, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro lcd_set
                                 	sbi PORTA, @0
                                 .endmacro
                                 
                                 .macro lcd_clr
                                 	cbi PORTA, @0
                                 .endmacro
                                 
                                 .macro do_led_dimming	; @0 = opaque levels @1 = {OCR3AL,OCR3BL,OCR3CL,OCR4CL} @2 = {OCR3AH,OCR3BH,OCR3CH,OCR4CH}
                                 	cpi @0, 0
                                 	breq clear0
                                 	cpi @0, 1
                                 	breq lvl1
                                 	cpi @0, 2
                                 	breq lvl2
                                 
                                 dark:
                                 	ldi temp2, DIM_LVL3
                                 	sts @1, temp2
                                 	jmp dim_end
                                 
                                 clear0:
                                 	ldi temp2, DIM_LVL0
                                 	sts @1, temp2
                                 	jmp dim_end
                                 
                                 lvl1:
                                 	ldi temp2, DIM_LVL1
                                 	sts @1, temp2
                                 	jmp dim_end
                                 
                                 lvl2:
                                 	ldi temp2, DIM_LVL2
                                 	sts @1, temp2
                                 
                                 dim_end:
                                 	clr temp2
                                 	sts @2, temp2
                                 .endmacro
                                 
                                 .macro wins_local_ctrl						; @0 = window no. i.e. 0-3
                                 	sbr win_busy, 1<<@0
                                 	
                                 	ldi yh, high(Windows)					; pointer to current windows status
                                 	ldi yl, low(Windows)					; in the data memory
                                 
                                 	ldd temp1, y+@0
                                 	cpi col, 0
                                 	breq wins_up
                                 wins_down:
                                 	mov temp2, temp1
                                 	cpi temp1, 0
                                 	breq wins_end
                                 	dec temp1
                                 	std y+@0, temp1
                                 	jmp wins_end
                                 wins_up:
                                 	mov temp2, temp1
                                 	cpi temp1, 3
                                 	breq wins_end
                                 	inc temp1
                                 	std y+@0, temp1
                                 wins_end:
                                 	nop
                                 .endmacro
                                 
                                 .macro centrl_ctrl
                                 	ldi yh, high(Windows)		; pointer to current windows status
                                 	ldi yl, low(Windows)		; in the data memory
                                 	ld temp1, y
                                 	cpi temp1, @0
                                 	breq clr_busy1
                                 ctrl1:
                                 	ldi temp1, @0
                                 	st y, temp1
                                 	ldi temp1, 1<<TOIE1			; Timer1 enable
                                 	sts TIMSK1, temp1			; T/C1 interrupt enable
                                 	jmp ctrl2
                                 clr_busy1:
                                 	cbr win_busy, 1<<0
                                 ctrl2:
                                 	ldd temp1, y+1
                                 	cpi temp1, @0
                                 	breq clr_busy2
                                 	ldi temp1, @0
                                 	std y+1, temp1
                                 	ldi temp1, 1<<TOIE3			; Timer3 enable
                                 	sts TIMSK3, temp1			; T/C3 interrupt enable
                                 	jmp ctrl3
                                 clr_busy2:
                                 	cbr win_busy, 1<<1
                                 ctrl3:
                                 	ldd temp1, y+2
                                 	cpi temp1, @0
                                 	breq clr_busy3
                                 	ldi temp1, @0
                                 	std y+2, temp1
                                 	ldi temp1, 1<<TOIE4			; Timer4 enable
                                 	sts TIMSK4, temp1			; T/C4 interrupt enable
                                 	jmp ctrl4
                                 clr_busy3:
                                 	cbr win_busy, 1<<2
                                 ctrl4:
                                 	ldd temp1, y+3
                                 	cpi temp1, @0
                                 	breq clr_busy4
                                 	ldi temp1, @0
                                 	std y+3, temp1
                                 	ldi temp1, 1<<TOIE5			; Timer5 enable
                                 	sts TIMSK5, temp1			; T/C5 interrupt enable
                                 	jmp ctrl_done
                                 clr_busy4:
                                 	cbr win_busy, 1<<3
                                 ctrl_done:
                                 	nop
                                 .endmacro
                                 
                                 ; The macro clears a word (2 bytes) in a memory
                                 ; the parameter @0 is the memory address for that word
                                 .macro Clear
                                 	ldi YL, low(@0)	; load the memory address to Y
                                 	ldi YH, high(@0)
                                 	clr temp1
                                 	st Y+, temp1	; clear the two bytes at @0 in SRAM
                                 	st Y, temp1
                                 .endmacro
                                 
                                 
                                 EXT_INT0:
000069 936f                      	push lcd_temp				; Save conflict register
00006a 935f                      	push temp2
00006b 934f                      	push temp1
00006c 93df                      	push YH
00006d 93cf                      	push YL
00006e 939f                      	push r25
00006f 938f                      	push r24					
000070 b74f                      	in	 temp1, SREG			; Save SREG
000071 934f                      	push temp1
                                 
                                 emer_waiting_loop1:
000072 3070                      	cpi win_busy, 0
000073 f009                      	breq emer_allgood1
                                 	;rcall sleep_5ms
000074 cffd                      	rjmp emer_waiting_loop1
                                 emer_allgood1:
000075 607f                      	sbr win_busy, 0x0F
                                 	;centrl_ctrl 0				; Emergency clear
                                 
                                 	;store control mode "!!"
000076 e241                      	ldi temp1, '!'
000077 834c                      	std y+4, temp1
000078 e241                      	ldi temp1, '!'
000079 834d                      	std y+5, temp1
                                 	;set mode address
00007a e861
00007b d505
00007c d51e                      	do_lcd_command MODE_ADDR
00007d e261
00007e d50d
00007f d51b                      	do_lcd_data '!'
000080 e261
000081 d50a
000082 d518                      	do_lcd_data '!'
                                 
000083 d53f                      	rcall sleep_halfsec
                                 
000084 e0d2                      	ldi yh, high(Windows)		; pointer to current windows status
000085 e0c0                      	ldi yl, low(Windows)		; in the data memory
                                 
000086 2744                      	clr temp1
000087 8348                      	std y+0, temp1
000088 8349                      	std y+1, temp1
000089 834a                      	std y+2, temp1
00008a 834b                      	std y+3, temp1
                                 
00008b 3040
00008c f049
00008d 3041
00008e f061
00008f 3042
000090 f079
000091 ef5f
000092 9350 0098
000094 940c 00a3
000096 e050
000097 9350 0098
000099 940c 00a3
00009b e150
00009c 9350 0098
00009e 940c 00a3
0000a0 e550
0000a1 9350 0098
0000a3 2755
0000a4 9350 0099                 	do_led_dimming temp1, OCR3AL, OCR3AH
0000a6 3040
0000a7 f049
0000a8 3041
0000a9 f061
0000aa 3042
0000ab f079
0000ac ef5f
0000ad 9350 009a
0000af 940c 00be
0000b1 e050
0000b2 9350 009a
0000b4 940c 00be
0000b6 e150
0000b7 9350 009a
0000b9 940c 00be
0000bb e550
0000bc 9350 009a
0000be 2755
0000bf 9350 009b                 	do_led_dimming temp1, OCR3BL, OCR3BH
0000c1 3040
0000c2 f049
0000c3 3041
0000c4 f061
0000c5 3042
0000c6 f079
0000c7 ef5f
0000c8 9350 009c
0000ca 940c 00d9
0000cc e050
0000cd 9350 009c
0000cf 940c 00d9
0000d1 e150
0000d2 9350 009c
0000d4 940c 00d9
0000d6 e550
0000d7 9350 009c
0000d9 2755
0000da 9350 009d                 	do_led_dimming temp1, OCR3CL, OCR3CH
0000dc 3040
0000dd f049
0000de 3041
0000df f061
0000e0 3042
0000e1 f079
0000e2 ef5f
0000e3 9350 00ac
0000e5 940c 00f4
0000e7 e050
0000e8 9350 00ac
0000ea 940c 00f4
0000ec e150
0000ed 9350 00ac
0000ef 940c 00f4
0000f1 e550
0000f2 9350 00ac
0000f4 2755
0000f5 9350 00ad                 	do_led_dimming temp1, OCR4CL, OCR4CH
                                 
0000f7 ec64
0000f8 d488
0000f9 d4a1                      	do_lcd_command W1_ADDR
0000fa e360
0000fb d490
0000fc d49e                      	do_lcd_data '0'
0000fd ec67
0000fe d482
0000ff d49b                      	do_lcd_command W2_ADDR
000100 e360
000101 d48a
000102 d498                      	do_lcd_data '0'
000103 ec6a
000104 d47c
000105 d495                      	do_lcd_command W3_ADDR
000106 e360
000107 d484
000108 d492                      	do_lcd_data '0'
000109 ec6d
00010a d476
00010b d48f                      	do_lcd_command W4_ADDR
00010c e360
00010d d47e
00010e d48c                      	do_lcd_data '0'
                                 
00010f 2777                      	clr win_busy
                                 
                                 /*
                                 emer_ending_loop1:
                                 	cpi win_busy, 0
                                 	breq emer_end1
                                 	;rcall sleep_5ms
                                 	rjmp emer_ending_loop1
                                 */
                                 
                                 emer_end1:
000110 914f                      	pop temp1                       ; Restore SREG
000111 bf4f                      	out SREG,temp1                  ; Store data from temp1 to SREG
000112 918f                      	pop r24
000113 919f                      	pop r25
000114 91cf                      	pop YL
000115 91df                      	pop YH
000116 914f                      	pop temp1                       ; Restore register
000117 915f                      	pop temp2
000118 916f                      	pop lcd_temp
000119 9518                      	reti                            ; Return from the interrupt
                                 
                                 EXT_INT1:
00011a 936f                      	push lcd_temp				; Save conflict register
00011b 935f                      	push temp2
00011c 934f                      	push temp1
00011d 93df                      	push YH
00011e 93cf                      	push YL
00011f 939f                      	push r25
000120 938f                      	push r24					
000121 b74f                      	in	 temp1, SREG			; Save SREG
000122 934f                      	push temp1
                                 
                                 emer_waiting_loop2:
000123 3070                      	cpi win_busy, 0
000124 f009                      	breq emer_allgood2
                                 	;rcall sleep_5ms
000125 cffd                      	rjmp emer_waiting_loop2
                                 emer_allgood2:
000126 607f                      	sbr win_busy, 0x0F
                                 
                                 	;store control mode "!!"
000127 e241                      	ldi temp1, '!'
000128 834c                      	std y+4, temp1
000129 e241                      	ldi temp1, '!'
00012a 834d                      	std y+5, temp1
                                 	;set mode address
00012b e861
00012c d454
00012d d46d                      	do_lcd_command MODE_ADDR
00012e e261
00012f d45c
000130 d46a                      	do_lcd_data '!'
000131 e261
000132 d459
000133 d467                      	do_lcd_data '!'
                                 
                                 	;all windows to be clear
000134 d48e                      	rcall sleep_halfsec
                                 
000135 e0d2                      	ldi yh, high(Windows)		; pointer to current windows status
000136 e0c0                      	ldi yl, low(Windows)		; in the data memory
                                 
000137 2744                      	clr temp1
000138 8348                      	std y+0, temp1
000139 8349                      	std y+1, temp1
00013a 834a                      	std y+2, temp1
00013b 834b                      	std y+3, temp1
                                 
00013c 3040
00013d f049
00013e 3041
00013f f061
000140 3042
000141 f079
000142 ef5f
000143 9350 0098
000145 940c 0154
000147 e050
000148 9350 0098
00014a 940c 0154
00014c e150
00014d 9350 0098
00014f 940c 0154
000151 e550
000152 9350 0098
000154 2755
000155 9350 0099                 	do_led_dimming temp1, OCR3AL, OCR3AH
000157 3040
000158 f049
000159 3041
00015a f061
00015b 3042
00015c f079
00015d ef5f
00015e 9350 009a
000160 940c 016f
000162 e050
000163 9350 009a
000165 940c 016f
000167 e150
000168 9350 009a
00016a 940c 016f
00016c e550
00016d 9350 009a
00016f 2755
000170 9350 009b                 	do_led_dimming temp1, OCR3BL, OCR3BH
000172 3040
000173 f049
000174 3041
000175 f061
000176 3042
000177 f079
000178 ef5f
000179 9350 009c
00017b 940c 018a
00017d e050
00017e 9350 009c
000180 940c 018a
000182 e150
000183 9350 009c
000185 940c 018a
000187 e550
000188 9350 009c
00018a 2755
00018b 9350 009d                 	do_led_dimming temp1, OCR3CL, OCR3CH
00018d 3040
00018e f049
00018f 3041
000190 f061
000191 3042
000192 f079
000193 ef5f
000194 9350 00ac
000196 940c 01a5
000198 e050
000199 9350 00ac
00019b 940c 01a5
00019d e150
00019e 9350 00ac
0001a0 940c 01a5
0001a2 e550
0001a3 9350 00ac
0001a5 2755
0001a6 9350 00ad                 	do_led_dimming temp1, OCR4CL, OCR4CH
                                 
0001a8 ec64
0001a9 d3d7
0001aa d3f0                      	do_lcd_command W1_ADDR
0001ab e360
0001ac d3df
0001ad d3ed                      	do_lcd_data '0'
0001ae ec67
0001af d3d1
0001b0 d3ea                      	do_lcd_command W2_ADDR
0001b1 e360
0001b2 d3d9
0001b3 d3e7                      	do_lcd_data '0'
0001b4 ec6a
0001b5 d3cb
0001b6 d3e4                      	do_lcd_command W3_ADDR
0001b7 e360
0001b8 d3d3
0001b9 d3e1                      	do_lcd_data '0'
0001ba ec6d
0001bb d3c5
0001bc d3de                      	do_lcd_command W4_ADDR
0001bd e360
0001be d3cd
0001bf d3db                      	do_lcd_data '0'
                                 
0001c0 2777                      	clr win_busy
                                 
                                 emer_end2:
0001c1 914f                      	pop temp1                       ; Restore SREG
0001c2 bf4f                      	out SREG,temp1                  ; Store data from temp1 to SREG
0001c3 918f                      	pop r24
0001c4 919f                      	pop r25
0001c5 91cf                      	pop YL
0001c6 91df                      	pop YH
0001c7 914f                      	pop temp1                       ; Restore register
0001c8 915f                      	pop temp2
0001c9 916f                      	pop lcd_temp
0001ca 9518                      	reti                            ; Return from the interrupt
                                 
                                 
                                 Timer1OVF:					; interrupt subroutine for Timer1
0001cb 936f                      	push lcd_temp
0001cc 935f                      	push temp2
0001cd 934f                      	push temp1
0001ce 93df                      	push YH					; Save all conflict registers in the prologue.
0001cf 93cf                      	push YL
0001d0 939f                      	push r25
0001d1 938f                      	push r24
0001d2 b74f                      	in	 temp1, SREG		; Save SREG
0001d3 934f                      	push temp1
                                 
0001d4 e0c6                      	ldi YL, low(Counter1)	; Load the address of the temporary
0001d5 e0d2                      	ldi YH, high(Counter1)	; counter.
0001d6 9189                      	ld r24, Y+
0001d7 8198                      	ld r25, Y
0001d8 9601                      	adiw r25:r24, 1			; Increase the temporary counter by one.
                                 
0001d9 3f8a                      	cpi r24, low(TIMER_1S/2)
0001da f599                      	brne NotSecond1
0001db 3090                      	cpi r25, high(TIMER_1S/2)
0001dc f589                      	brne NotSecond1
                                 
0001dd 9140 006f                 	lds temp1, TIMSK1
0001df 7f4e                      	cbr temp1, 1<<TOIE1
0001e0 9340 006f                 	sts TIMSK1, temp1		; T/C1 interrupt disable
                                 
0001e2 e0c0                      	ldi YL, low(Windows)
0001e3 e0d2                      	ldi YH, high(Windows)
0001e4 8148                      	ldd temp1, Y+0			; Read W1 opaque level
0001e5 3040
0001e6 f049
0001e7 3041
0001e8 f061
0001e9 3042
0001ea f079
0001eb ef5f
0001ec 9350 0098
0001ee 940c 01fd
0001f0 e050
0001f1 9350 0098
0001f3 940c 01fd
0001f5 e150
0001f6 9350 0098
0001f8 940c 01fd
0001fa e550
0001fb 9350 0098
0001fd 2755
0001fe 9350 0099                 	do_led_dimming temp1, OCR3AL, OCR3AH
                                 	;set mode address
000200 ec64
000201 d37f
000202 d398                      	do_lcd_command W1_ADDR
000203 5d40                      	subi temp1, -'0'
000204 2f64
000205 d386
000206 d394                      	do_lcd_data_reg temp1
                                 
000207 7f7e                      	cbr win_busy, 1<<0		; Clear win1 busy flag
000208 e0c6
000209 e0d2
00020a 2744
00020b 9349
00020c 8348                      	Clear Counter1
                                 
00020d c002                      	rjmp EndIF1
                                 
                                 NotSecond1:
00020e 8398                      	st Y, r25				; Store the value of the temporary counter.
00020f 938a                      	st -Y, r24
                                 
                                 EndIF1:
000210 914f                      	pop temp1               ; Restore SREG
000211 bf4f                      	out SREG,temp1          ; Store data from temp1 to SREG
000212 918f                      	pop r24					; Epilogue starts;
000213 919f                      	pop r25					; Restore all conflict registers from the stack.
000214 91cf                      	pop YL
000215 91df                      	pop YH
000216 914f                      	pop temp1
000217 915f                      	pop temp2
000218 916f                      	pop lcd_temp
000219 9518                      	reti					; Return from the interrupt.
                                 
                                 
                                 Timer3OVF:
00021a 936f                      	push lcd_temp
00021b 935f                      	push temp2
00021c 934f                      	push temp1
00021d 93df                      	push YH					; Save all conflict registers in the prologue.
00021e 93cf                      	push YL
00021f 939f                      	push r25
000220 938f                      	push r24
000221 b74f                      	in	 temp1, SREG		; Save SREG
000222 934f                      	push temp1
                                 
000223 e0c8                      	ldi YL, low(Counter2)	; Load the address of the temporary
000224 e0d2                      	ldi YH, high(Counter2)	; counter.
000225 9189                      	ld r24, Y+
000226 8198                      	ld r25, Y
000227 9601                      	adiw r25:r24, 1			; Increase the temporary counter by one.
                                 
000228 3f8a                      	cpi r24, low(TIMER_1S/2)
000229 f599                      	brne NotSecond2
00022a 3090                      	cpi r25, high(TIMER_1S/2)
00022b f589                      	brne NotSecond2
                                 
00022c 9140 0071                 	lds temp1, TIMSK3
00022e 7f4e                      	cbr temp1, 1<<TOIE3
00022f 9340 0071                 	sts TIMSK3, temp1		; T/C3 interrupt disable
                                 	
000231 e0c0                      	ldi YL, low(Windows)
000232 e0d2                      	ldi YH, high(Windows)
000233 8149                      	ldd temp1, Y+1			; Read W2 opaque level
                                 	
                                 	;do_lcd_command 0xC0
                                 	;do_lcd_data 'D'
                                 	
000234 3040
000235 f049
000236 3041
000237 f061
000238 3042
000239 f079
00023a ef5f
00023b 9350 009a
00023d 940c 024c
00023f e050
000240 9350 009a
000242 940c 024c
000244 e150
000245 9350 009a
000247 940c 024c
000249 e550
00024a 9350 009a
00024c 2755
00024d 9350 009b                 	do_led_dimming temp1, OCR3BL, OCR3BH
                                 	;set mode address
00024f ec67
000250 d330
000251 d349                      	do_lcd_command W2_ADDR
000252 5d40                      	subi temp1, -'0'
000253 2f64
000254 d337
000255 d345                      	do_lcd_data_reg temp1
                                 
000256 7f7d                      	cbr win_busy, 1<<1
000257 e0c8
000258 e0d2
000259 2744
00025a 9349
00025b 8348                      	Clear Counter2
                                 
00025c c002                      	rjmp EndIF2
                                 
                                 NotSecond2:
00025d 8398                      	st Y, r25				; Store the value of the temporary counter.
00025e 938a                      	st -Y, r24
                                 	
                                 	;do_lcd_command 0xC0
                                 	;subi r24, -'0'
                                 	;do_lcd_data_reg r24
                                 
                                 EndIF2:
00025f 914f                      	pop temp1               ; Restore SREG
000260 bf4f                      	out SREG,temp1          ; Store data from temp1 to SREG
000261 918f                      	pop r24					; Epilogue starts;
000262 919f                      	pop r25					; Restore all conflict registers from the stack.
000263 91cf                      	pop YL
000264 91df                      	pop YH
000265 914f                      	pop temp1
000266 915f                      	pop temp2
000267 916f                      	pop lcd_temp
000268 9518                      	reti					; Return from the interrupt.
                                 
                                 
                                 Timer4OVF:
000269 936f                      	push lcd_temp
00026a 935f                      	push temp2
00026b 934f                      	push temp1
00026c 93df                      	push YH					; Save all conflict registers in the prologue.
00026d 93cf                      	push YL
00026e 939f                      	push r25
00026f 938f                      	push r24
000270 b74f                      	in	 temp1, SREG		; Save SREG
000271 934f                      	push temp1
                                 
000272 e0ca                      	ldi YL, low(Counter3)	; Load the address of the temporary
000273 e0d2                      	ldi YH, high(Counter3)	; counter.
000274 9189                      	ld r24, Y+
000275 8198                      	ld r25, Y
000276 9601                      	adiw r25:r24, 1			; Increase the temporary counter by one.
                                 
000277 3f8a                      	cpi r24, low(TIMER_1S/2)
000278 f599                      	brne NotSecond3
000279 3090                      	cpi r25, high(TIMER_1S/2)
00027a f589                      	brne NotSecond3
                                 
00027b 9140 0072                 	lds temp1, TIMSK4
00027d 7f4e                      	cbr temp1, 1<<TOIE4
00027e 9340 0072                 	sts TIMSK4, temp1		; T/C4 interrupt disable
                                 
000280 e0c0                      	ldi YL, low(Windows)
000281 e0d2                      	ldi YH, high(Windows)
000282 814a                      	ldd temp1, Y+2			; Read W3 opaque level
                                 
                                 	;do_lcd_command 0xC0
                                 	;do_lcd_data 'D'
                                 
000283 3040
000284 f049
000285 3041
000286 f061
000287 3042
000288 f079
000289 ef5f
00028a 9350 009c
00028c 940c 029b
00028e e050
00028f 9350 009c
000291 940c 029b
000293 e150
000294 9350 009c
000296 940c 029b
000298 e550
000299 9350 009c
00029b 2755
00029c 9350 009d                 	do_led_dimming temp1, OCR3CL, OCR3CH
                                 	;set mode address
00029e ec6a
00029f d2e1
0002a0 d2fa                      	do_lcd_command W3_ADDR
0002a1 5d40                      	subi temp1, -'0'
0002a2 2f64
0002a3 d2e8
0002a4 d2f6                      	do_lcd_data_reg temp1
                                 
0002a5 7f7b                      	cbr win_busy, 1<<2
0002a6 e0ca
0002a7 e0d2
0002a8 2744
0002a9 9349
0002aa 8348                      	Clear Counter3
                                 
0002ab c002                      	rjmp EndIF3
                                 
                                 NotSecond3:
0002ac 8398                      	st Y, r25				; Store the value of the temporary counter.
0002ad 938a                      	st -Y, r24
                                 
                                 EndIF3:
0002ae 914f                      	pop temp1               ; Restore SREG
0002af bf4f                      	out SREG,temp1          ; Store data from temp1 to SREG
0002b0 918f                      	pop r24					; Epilogue starts;
0002b1 919f                      	pop r25					; Restore all conflict registers from the stack.
0002b2 91cf                      	pop YL
0002b3 91df                      	pop YH
0002b4 914f                      	pop temp1
0002b5 915f                      	pop temp2
0002b6 916f                      	pop lcd_temp
0002b7 9518                      	reti					; Return from the interrupt.
                                 
                                 
                                 Timer5OVF:
0002b8 936f                      	push lcd_temp
0002b9 935f                      	push temp2
0002ba 934f                      	push temp1
0002bb 93df                      	push YH					; Save all conflict registers in the prologue.
0002bc 93cf                      	push YL
0002bd 939f                      	push r25
0002be 938f                      	push r24
0002bf b74f                      	in	 temp1, SREG		; Save SREG
0002c0 934f                      	push temp1
                                 
0002c1 e0cc                      	ldi YL, low(Counter4)	; Load the address of the temporary
0002c2 e0d2                      	ldi YH, high(Counter4)	; counter.
0002c3 9189                      	ld r24, Y+
0002c4 8198                      	ld r25, Y
0002c5 9601                      	adiw r25:r24, 1		; Increase the temporary counter by one.
                                 
0002c6 3f8a                      	cpi r24, low(TIMER_1S/2)
0002c7 f599                      	brne NotSecond4
0002c8 3090                      	cpi r25, high(TIMER_1S/2)
0002c9 f589                      	brne NotSecond4
                                 
0002ca 9140 0073                 	lds temp1, TIMSK5
0002cc 7f4e                      	cbr temp1, 1<<TOIE5
0002cd 9340 0073                 	sts TIMSK5, temp1		; T/C5 interrupt disable
                                 
0002cf e0c0                      	ldi YL, low(Windows)
0002d0 e0d2                      	ldi YH, high(Windows)
0002d1 814b                      	ldd temp1, Y+3			; Read W4 opaque level
0002d2 3040
0002d3 f049
0002d4 3041
0002d5 f061
0002d6 3042
0002d7 f079
0002d8 ef5f
0002d9 9350 00ac
0002db 940c 02ea
0002dd e050
0002de 9350 00ac
0002e0 940c 02ea
0002e2 e150
0002e3 9350 00ac
0002e5 940c 02ea
0002e7 e550
0002e8 9350 00ac
0002ea 2755
0002eb 9350 00ad                 	do_led_dimming temp1, OCR4CL, OCR4CH
                                 	;set mode address
0002ed ec6d
0002ee d292
0002ef d2ab                      	do_lcd_command W4_ADDR
0002f0 5d40                      	subi temp1, -'0'
0002f1 2f64
0002f2 d299
0002f3 d2a7                      	do_lcd_data_reg temp1
                                 
0002f4 7f77                      	cbr win_busy, 1<<3		; Clear win4 busy flag
0002f5 e0cc
0002f6 e0d2
0002f7 2744
0002f8 9349
0002f9 8348                      	Clear Counter4
                                 
0002fa c002                      	rjmp EndIF4
                                 
                                 NotSecond4:
0002fb 8398                      	st Y, r25				; Store the value of the temporary counter.
0002fc 938a                      	st -Y, r24
                                 
                                 EndIF4:
0002fd 914f                      	pop temp1               ; Restore SREG
0002fe bf4f                      	out SREG,temp1          ; Store data from temp1 to SREG
0002ff 918f                      	pop r24					; Epilogue starts;
000300 919f                      	pop r25					; Restore all conflict registers from the stack.
000301 91cf                      	pop YL
000302 91df                      	pop YH
000303 914f                      	pop temp1
000304 915f                      	pop temp2
000305 916f                      	pop lcd_temp
000306 9518                      	reti					; Return from the interrupt.
                                 
                                 
                                 RESET:
000307 94f8                      	cli											; Disable interrupts
                                 
                                 	;setup INT0 and INT1
000308 e04a                      	ldi temp1, (2 << ISC00) | (2 << ISC10)      ; Set INT0 and INT1 as falling edge triggered interrupt
000309 9340 0069                 	sts EICRA, temp1							; Store the value of temp1 to EICRA
                                 
00030b b34d                      	in temp1, EIMSK								; Enable INT0 and INT1
00030c 6043                      	ori temp1, (1 << INT0) | (1 << INT1)        ; Logical OR register with immediate
00030d bb4d                      	out EIMSK, temp1							; Store data from temp1 to EIMSK
                                 	;sbi EIMSK, (1 << INT0) | (1 << INT1)
                                 
                                 	;setup Timer1,3,4,5
                                 	;1,5 on phase correct PWM mode but no connection on OC1x and OC5x
                                 	;3,4 on phase correct PWM mode
                                 	;ldi temp1, 0x00							; Set timer1,5 on normal mode
                                 
00030e e041                      	ldi temp1, (1<<WGM10)						; set timer1,5 on Phase Correct PWM mode
00030f 9340 0080                 	sts TCCR1A, temp1
                                 	;ldi temp1, (1<<WGM00)
                                 	;sts TCCR0A, temp1
                                 	;sts TCCR2A, temp1
000311 e041                      	ldi temp1, (1<<WGM50)
000312 9340 0120                 	sts TCCR5A, temp1
                                 	
000314 e043                      	ldi temp1, 0x03								; Prescaling value=64, counting 1024 us
000315 9340 0081                 	sts TCCR1B, temp1
                                 	;sts TCCR0B, temp1
                                 	;sts TCCR2B, temp1
000317 9340 0121                 	sts TCCR5B, temp1
                                 
                                 	;set Timer3 to Phase Correct PWM on OC3A, OC3B, OC3C
                                 	;clear when up-counting match, set when down-counting match
000319 ea49                      	ldi temp1, (1<<WGM30)|(1<<COM3A1)|(1<<COM3B1)|(1<<COM3C1)
00031a 9340 0090                 	sts TCCR3A, temp1	
00031c e043                      	ldi temp1, (1<<CS30)|(1<<CS31)
00031d 9340 0091                 	sts TCCR3B, temp1
                                 
                                 	;set Timer4 to Phase Correct PWM on OC4C
00031f e049                      	ldi temp1, (1<<WGM40)|(1<<COM4C1)
000320 9340 00a0                 	sts TCCR4A, temp1
000322 e043                      	ldi temp1, (1<<CS40)|(1<<CS41)
000323 9340 00a1                 	sts TCCR4B, temp1
                                 
000325 9478                      	sei											; Enable global interrupt
                                 
                                 	;setup keypad
000326 ef40                      	ldi temp1, PORTLDIR			; columns are outputs, rows are inputs
000327 9340 010a                 	sts	DDRL, temp1
                                 
                                 	;setup LEDs
000329 e348                      	ldi temp1, 0b00111000
00032a b94d                      	out DDRE, temp1				; Bits 3,4,5 will function as OC3A,B,C.
                                 
00032b e240                      	ldi temp1, 0b00100000
00032c 9340 0101                 	sts DDRH, temp1				; Bit 5 will function as OC4C.
                                 
                                 	;setup LCD
00032e ef4f                      	ldi temp1, low(RAMEND)
00032f bf4d                      	out SPL, temp1
000330 e241                      	ldi temp1, high(RAMEND)
000331 bf4e                      	out SPH, temp1
                                 
000332 ef4f                      	ser temp1
000333 b947                      	out DDRC, temp1 ;set PortC as output
000334 b941                      	out DDRA, temp1 ;set PortA as output
000335 2744                      	clr temp1
000336 b948                      	out PORTC, temp1
000337 b942                      	out PORTA, temp1
                                 
000338 e368
000339 d247
00033a d260                      	do_lcd_command 0b00111000 ; 2x5x7
00033b d281                      	rcall sleep_5ms
00033c e368
00033d d243
00033e d25c                      	do_lcd_command 0b00111000 ; 2x5x7
00033f d26e                      	rcall sleep_1ms
000340 e368
000341 d23f
000342 d258                      	do_lcd_command 0b00111000 ; 2x5x7
000343 e368
000344 d23c
000345 d255                      	do_lcd_command 0b00111000 ; 2x5x7
000346 e068
000347 d239
000348 d252                      	do_lcd_command 0b00001000 ; display off
000349 e061
00034a d236
00034b d24f                      	do_lcd_command 0b00000001 ; clear display
00034c e066
00034d d233
00034e d24c                      	do_lcd_command 0b00000110 ; increment, no display shift
00034f e06c
000350 d230
000351 d249                      	do_lcd_command 0b00001100 ; display on, cursor off, w/o blink
                                 
                                 	;initialization
                                 	;clear window busy flag and timer counter
000352 2777                      	clr win_busy
000353 e0c6
000354 e0d2
000355 2744
000356 9349
000357 8348                      	Clear Counter1
000358 e0c8
000359 e0d2
00035a 2744
00035b 9349
00035c 8348                      	Clear Counter2
00035d e0ca
00035e e0d2
00035f 2744
000360 9349
000361 8348                      	Clear Counter3
000362 e0cc
000363 e0d2
000364 2744
000365 9349
000366 8348                      	Clear Counter4
                                 
                                 	;load data from program memory to data memory
000367 e0f0                      	ldi zh, high(WINS_INI<<1)				; pointer to the initial status of windows
000368 ecec                      	ldi zl, low(WINS_INI<<1)				; in the program memory
                                 
000369 e0d2                      	ldi yh, high(Windows)					; pointer to current windows status
00036a e0c0                      	ldi yl, low(Windows)					; in the data memory
                                 
00036b 2744                      	clr temp1
                                 load:
00036c 9155                      	lpm temp2, z+
00036d 9359                      	st y+, temp2
00036e 9543                      	inc temp1
00036f 3046                      	cpi temp1, WIN_NUM+2
000370 f3dc                      	brlt load
                                 	
                                 	;LEDs and Display initialization
                                 	;set the value to control PWM duty cycle, i.e. LEDs dimming
000371 e0d2                      	ldi yh, high(Windows)
000372 e0c0                      	ldi yl, low(Windows)
000373 8148                      	ld temp1, y
000374 3040
000375 f049
000376 3041
000377 f061
000378 3042
000379 f079
00037a ef5f
00037b 9350 0098
00037d 940c 038c
00037f e050
000380 9350 0098
000382 940c 038c
000384 e150
000385 9350 0098
000387 940c 038c
000389 e550
00038a 9350 0098
00038c 2755
00038d 9350 0099                 	do_led_dimming temp1, OCR3AL, OCR3AH
00038f 8149                      	ldd temp1, y+1
000390 3040
000391 f049
000392 3041
000393 f061
000394 3042
000395 f079
000396 ef5f
000397 9350 009a
000399 940c 03a8
00039b e050
00039c 9350 009a
00039e 940c 03a8
0003a0 e150
0003a1 9350 009a
0003a3 940c 03a8
0003a5 e550
0003a6 9350 009a
0003a8 2755
0003a9 9350 009b                 	do_led_dimming temp1, OCR3BL, OCR3BH
0003ab 814a                      	ldd temp1, y+2
0003ac 3040
0003ad f049
0003ae 3041
0003af f061
0003b0 3042
0003b1 f079
0003b2 ef5f
0003b3 9350 009c
0003b5 940c 03c4
0003b7 e050
0003b8 9350 009c
0003ba 940c 03c4
0003bc e150
0003bd 9350 009c
0003bf 940c 03c4
0003c1 e550
0003c2 9350 009c
0003c4 2755
0003c5 9350 009d                 	do_led_dimming temp1, OCR3CL, OCR3CH
0003c7 814b                      	ldd temp1, y+3
0003c8 3040
0003c9 f049
0003ca 3041
0003cb f061
0003cc 3042
0003cd f079
0003ce ef5f
0003cf 9350 00ac
0003d1 940c 03e0
0003d3 e050
0003d4 9350 00ac
0003d6 940c 03e0
0003d8 e150
0003d9 9350 00ac
0003db 940c 03e0
0003dd e550
0003de 9350 00ac
0003e0 2755
0003e1 9350 00ad                 	do_led_dimming temp1, OCR4CL, OCR4CH
                                 
                                 	;initialize Display
                                 	;1st line
0003e3 e260
0003e4 d1a7
0003e5 d1b5                      	do_lcd_data 0x20
                                 	;lds temp1, Mode
0003e6 814c                      	ldd temp1, y+4
0003e7 2f64
0003e8 d1a3
0003e9 d1b1                      	do_lcd_data_reg temp1
                                 	;do_lcd_data ':'
0003ea 814d                      	ldd temp1, y+5
0003eb 2f64
0003ec d19f
0003ed d1ad                      	do_lcd_data_reg temp1
                                 
                                 	;do_lcd_data 0x20
0003ee e260
0003ef d19c
0003f0 d1aa                      	do_lcd_data 0x20
0003f1 e567
0003f2 d199
0003f3 d1a7                      	do_lcd_data 'W'
0003f4 e361
0003f5 d196
0003f6 d1a4                      	do_lcd_data '1'
                                 
0003f7 e260
0003f8 d193
0003f9 d1a1                      	do_lcd_data 0x20
0003fa e567
0003fb d190
0003fc d19e                      	do_lcd_data 'W'
0003fd e362
0003fe d18d
0003ff d19b                      	do_lcd_data '2'
                                 	
000400 e260
000401 d18a
000402 d198                      	do_lcd_data 0x20
000403 e567
000404 d187
000405 d195                      	do_lcd_data 'W'
000406 e363
000407 d184
000408 d192                      	do_lcd_data '3'
                                 	
000409 e260
00040a d181
00040b d18f                      	do_lcd_data 0x20
00040c e567
00040d d17e
00040e d18c                      	do_lcd_data 'W'
00040f e364
000410 d17b
000411 d189                      	do_lcd_data '4'
                                 
                                 	;2nd line
000412 ec60
000413 d16d
000414 d186                      	do_lcd_command 0xC0			; set second line address(0x40)
                                 
000415 e260
000416 d175
000417 d183                      	do_lcd_data 0x20
000418 e260
000419 d172
00041a d180                      	do_lcd_data 0x20
00041b e260
00041c d16f
00041d d17d                      	do_lcd_data 0x20
00041e e260
00041f d16c
000420 d17a                      	do_lcd_data 0x20
                                 
000421 8148                      	ld temp1, y
000422 5d40                      	subi temp1, -'0'
000423 2f64
000424 d167
000425 d175                      	do_lcd_data_reg temp1		; W1 = 0x44
                                 	
000426 e260
000427 d164
000428 d172                      	do_lcd_data 0x20
000429 e260
00042a d161
00042b d16f                      	do_lcd_data 0x20
                                 
00042c 8149                      	ldd temp1, y+1				; W2 = 0x47
00042d 5d40                      	subi temp1, -'0'
00042e 2f64
00042f d15c
000430 d16a                      	do_lcd_data_reg temp1
                                 
000431 e260
000432 d159
000433 d167                      	do_lcd_data 0x20
000434 e260
000435 d156
000436 d164                      	do_lcd_data 0x20
                                 
000437 814a                      	ldd temp1, y+2				; W3 = 0x4A
000438 5d40                      	subi temp1, -'0'
000439 2f64
00043a d151
00043b d15f                      	do_lcd_data_reg temp1
                                 
00043c e260
00043d d14e
00043e d15c                      	do_lcd_data 0x20
00043f e260
000440 d14b
000441 d159                      	do_lcd_data 0x20
                                 
000442 814b                      	ldd temp1, y+3				; W4 = 0x4D
000443 5d40                      	subi temp1, -'0'
000444 2f64
000445 d146
000446 d154                      	do_lcd_data_reg temp1
                                 
                                 ;halt:
                                 ;	rjmp halt
                                 
                                 main:
000447 ee3f                      	ldi cmask, INITCOLMASK		; initial column mask
000448 2711                      	clr	col						; initial column	
                                 
                                 colloop:
000449 3014                      	cpi col, 4
00044a f3e1                      	breq main
00044b 9330 010b                 	sts	PORTL, cmask			; set column to mask value (one column off)
00044d ef4f                      	ldi temp1, 0xFF
                                 
                                 delay:
00044e 954a                      	dec temp1
00044f f7f1                      	brne delay
                                 
000450 9140 0109                 	lds	temp1, PINL				; read PORTL
000452 704f                      	andi temp1, ROWMASK
000453 304f                      	cpi temp1, 0x0F				; check if any rows are on
000454 f059                      	breq nextcol
                                 								; if yes, find which row is on
000455 e021                      	ldi rmask, INITROWMASK		; initialise row check
000456 2700                      	clr	row						; initial row
                                 
                                 rowloop:
000457 3004                      	cpi row, 4
000458 f039                      	breq nextcol
000459 2f54                      	mov temp2, temp1
00045a 2352                      	and temp2, rmask			; check masked bit
00045b f041                      	breq convert 				; if bit is clear, convert the bitcode
00045c 9503                      	inc row						; else move to the next row
00045d 0f22                      	lsl rmask					; shift the mask to the next bit
00045e 940c 0457                 	jmp rowloop
                                 
                                 nextcol:
000460 0f33                      	lsl cmask					; else get new mask by shifting and 
000461 9513                      	inc col						; increment column value
000462 940c 0449                 	jmp colloop					; and check the next column
                                 
                                 convert:
000464 3000                      	cpi row, 0					; if row is 3 window1 or central control
000465 f041                      	breq win4
000466 3001                      	cpi row, 1
000467 f151                      	breq win3
000468 3002                      	cpi row, 2
000469 f011                      	breq jump2win2
00046a 940c 04da                 	jmp win1c
                                 
                                 jump2win2:
00046c 940c 04b6                 	jmp win2
                                 
                                 win4:
00046e 3012                      	cpi col, 2
00046f f010                      	brlo win4_ctrl
000470 940c 0447                 	jmp main
                                 win4_ctrl:
000472 fd73                      	sbrc win_busy, 3
000473 940c 0447                 	jmp main					; if win4 is busy, rescan the keypad
                                 
000475 6078
000476 e0d2
000477 e0c0
000478 814b
000479 3010
00047a f039
00047b 2f54
00047c 3040
00047d f049
00047e 954a
00047f 834b
000480 940c 0487
000482 2f54
000483 3043
000484 f011
000485 9543
000486 834b
000487 0000                      	wins_local_ctrl 3
                                 
000488 1745                      	cp temp1, temp2
000489 f419                      	brne start_timer5
00048a 7f77                      	cbr win_busy, 1<<3
00048b 940c 04fa                 	jmp local_end
                                 start_timer5:
00048d e041                      	ldi temp1, 1<<TOIE5			; Timer5 enable
00048e 9340 0073                 	sts TIMSK5, temp1			; T/C5 interrupt enable	
000490 940c 04fa                 	jmp local_end
                                 
                                 win3:
000492 3012                      	cpi col, 2
000493 f010                      	brlo win3_ctrl
000494 940c 0447                 	jmp main
                                 win3_ctrl:
000496 fd72                      	sbrc win_busy, 2
000497 940c 0447                 	jmp main
                                 
000499 6074
00049a e0d2
00049b e0c0
00049c 814a
00049d 3010
00049e f039
00049f 2f54
0004a0 3040
0004a1 f049
0004a2 954a
0004a3 834a
0004a4 940c 04ab
0004a6 2f54
0004a7 3043
0004a8 f011
0004a9 9543
0004aa 834a
0004ab 0000                      	wins_local_ctrl 2
                                 
0004ac 1745                      	cp temp1, temp2
0004ad f419                      	brne start_timer4
0004ae 7f7b                      	cbr win_busy, 1<<2
0004af 940c 04fa                 	jmp local_end
                                 start_timer4:
0004b1 e041                      	ldi temp1, 1<<TOIE4			; Timer4 enable
0004b2 9340 0072                 	sts TIMSK4, temp1			; T/C4 interrupt enable	
0004b4 940c 04fa                 	jmp local_end
                                 
                                 win2:
0004b6 3012                      	cpi col, 2
0004b7 f010                      	brlo win2_ctrl
0004b8 940c 0447                 	jmp main
                                 win2_ctrl:
0004ba fd71                      	sbrc win_busy, 1
0004bb 940c 0447                 	jmp main
                                 
0004bd 6072
0004be e0d2
0004bf e0c0
0004c0 8149
0004c1 3010
0004c2 f039
0004c3 2f54
0004c4 3040
0004c5 f049
0004c6 954a
0004c7 8349
0004c8 940c 04cf
0004ca 2f54
0004cb 3043
0004cc f011
0004cd 9543
0004ce 8349
0004cf 0000                      	wins_local_ctrl 1
                                 
0004d0 1745                      	cp temp1, temp2
0004d1 f419                      	brne start_timer3
0004d2 7f7d                      	cbr win_busy, 1<<1
0004d3 940c 04fa                 	jmp local_end
                                 start_timer3:
0004d5 e041                      	ldi temp1, 1<<TOIE3			; Timer3 enable
0004d6 9340 0071                 	sts TIMSK3, temp1			; T/C3 interrupt enable	
0004d8 940c 04fa                 	jmp local_end
                                 
                                 win1c:
0004da 3012                      	cpi col, 2
0004db f568                      	brsh centrl_waiting_loop
                                 win1_ctrl:
0004dc fd70                      	sbrc win_busy, 0
0004dd 940c 0447                 	jmp main
                                 
0004df 6071
0004e0 e0d2
0004e1 e0c0
0004e2 8148
0004e3 3010
0004e4 f039
0004e5 2f54
0004e6 3040
0004e7 f049
0004e8 954a
0004e9 8348
0004ea 940c 04f1
0004ec 2f54
0004ed 3043
0004ee f011
0004ef 9543
0004f0 8348
0004f1 0000                      	wins_local_ctrl 0
                                 
0004f2 1745                      	cp temp1, temp2
0004f3 f419                      	brne start_timer1
0004f4 7f7e                      	cbr win_busy, 1<<0
0004f5 940c 04fa                 	jmp local_end
                                 start_timer1:
0004f7 e041                      	ldi temp1, 1<<TOIE1			; Timer1 enable
0004f8 9340 006f                 	sts TIMSK1, temp1			; T/C1 interrupt enable
                                 
                                 local_end:
                                 	;store control mode "L:"
0004fa e44c                      	ldi temp1, 'L'
0004fb 834c                      	std y+4, temp1
0004fc e34a                      	ldi temp1, ':'
0004fd 834d                      	std y+5, temp1
                                 	;set mode address
0004fe e861
0004ff d081
000500 d09a                      	do_lcd_command MODE_ADDR
000501 e46c
000502 d089
000503 d097                      	do_lcd_data 'L'
000504 e36a
000505 d086
000506 d094                      	do_lcd_data ':'
000507 940c 0447                 	jmp main
                                 
                                 centrl_waiting_loop:
000509 3070                      	cpi win_busy, 0
00050a f009                      	breq centrl_allgood
                                 	;rcall sleep_5ms
00050b cffd                      	rjmp centrl_waiting_loop
                                 centrl_allgood:
00050c 607f                      	sbr win_busy, 0x0F
00050d 3012                      	cpi col, 2
00050e f189                      	breq centrl_up
                                 centrl_down:
00050f e0d2
000510 e0c0
000511 8148
000512 3040
000513 f039
000514 e040
000515 8348
000516 e041
000517 9340 006f
000519 940c 051c
00051b 7f7e
00051c 8149
00051d 3040
00051e f039
00051f e040
000520 8349
000521 e041
000522 9340 0071
000524 940c 0527
000526 7f7d
000527 814a
000528 3040
000529 f039
00052a e040
00052b 834a
00052c e041
00052d 9340 0072
00052f 940c 0532
000531 7f7b
000532 814b
000533 3040
000534 f039
000535 e040
000536 834b
000537 e041
000538 9340 0073
00053a 940c 053d
00053c 7f77
00053d 0000                      	centrl_ctrl 0
00053e 940c 056f                 	jmp centrl_end
                                 centrl_up:
000540 e0d2
000541 e0c0
000542 8148
000543 3043
000544 f039
000545 e043
000546 8348
000547 e041
000548 9340 006f
00054a 940c 054d
00054c 7f7e
00054d 8149
00054e 3043
00054f f039
000550 e043
000551 8349
000552 e041
000553 9340 0071
000555 940c 0558
000557 7f7d
000558 814a
000559 3043
00055a f039
00055b e043
00055c 834a
00055d e041
00055e 9340 0072
000560 940c 0563
000562 7f7b
000563 814b
000564 3043
000565 f039
000566 e043
000567 834b
000568 e041
000569 9340 0073
00056b 940c 056e
00056d 7f77
00056e 0000                      	centrl_ctrl 3
                                 centrl_end:
                                 	;store control mode "C:"
00056f e443                      	ldi temp1, 'C'
000570 834c                      	std y+4, temp1
000571 e34a                      	ldi temp1, ':'
000572 834d                      	std y+5, temp1
                                 	;set mode address
000573 e861
000574 d00c
000575 d025                      	do_lcd_command MODE_ADDR
000576 e463
000577 d014
000578 d022                      	do_lcd_data 'C'
000579 e36a
00057a d011
00057b d01f                      	do_lcd_data ':'
                                 
                                 centrl_ending_loop:
00057c 3070                      	cpi win_busy, 0
00057d f009                      	breq jump2main
                                 	;rcall sleep_5ms
00057e cffd                      	rjmp centrl_ending_loop
                                 
                                 jump2main:
00057f 940c 0447                 	jmp main
                                 
                                 
                                 ;
                                 ; Send a command to the LCD (lcd_temp = r22)
                                 ;
                                 
                                 lcd_command:
000581 b968                      	out PORTC, lcd_temp
000582 0000                      	nop
000583 9a16                      	lcd_set LCD_E
000584 0000                      	nop
000585 0000                      	nop
000586 0000                      	nop
000587 9816                      	lcd_clr LCD_E
000588 0000                      	nop
000589 0000                      	nop
00058a 0000                      	nop
00058b 9508                      	ret
                                 
                                 lcd_data:
00058c b968                      	out PORTC, lcd_temp
00058d 9a17                      	lcd_set LCD_RS
00058e 0000                      	nop
00058f 0000                      	nop
000590 0000                      	nop
000591 9a16                      	lcd_set LCD_E
000592 0000                      	nop
000593 0000                      	nop
000594 0000                      	nop
000595 9816                      	lcd_clr LCD_E
000596 0000                      	nop
000597 0000                      	nop
000598 0000                      	nop
000599 9817                      	lcd_clr LCD_RS
00059a 9508                      	ret
                                 
                                 lcd_wait:
00059b 936f                      	push lcd_temp
00059c 2766                      	clr lcd_temp
00059d b967                      	out DDRC, lcd_temp
00059e b968                      	out PORTC, lcd_temp
00059f 9a15                      	lcd_set LCD_RW
                                 lcd_wait_loop:
0005a0 0000                      	nop
0005a1 9a16                      	lcd_set LCD_E
0005a2 0000                      	nop
0005a3 0000                      	nop
0005a4 0000                          nop
0005a5 b166                      	in lcd_temp, PINC
0005a6 9816                      	lcd_clr LCD_E
0005a7 fd67                      	sbrc lcd_temp, 7
0005a8 cff7                      	rjmp lcd_wait_loop
0005a9 9815                      	lcd_clr LCD_RW
0005aa ef6f                      	ser lcd_temp
0005ab b967                      	out DDRC, lcd_temp
0005ac 916f                      	pop lcd_temp
0005ad 9508                      	ret
                                 
                                 .equ F_CPU = 16000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4
                                 ; 4 cycles per iteration - setup/call-return overhead
                                 
                                 sleep_1ms:
0005ae 934f                      	push temp1
0005af b74f                      	in temp1, SREG
0005b0 934f                      	push temp1
0005b1 938f                      	push r24
0005b2 939f                      	push r25
                                 
0005b3 e09f                      	ldi r25, high(DELAY_1MS)
0005b4 e98c                      	ldi r24, low(DELAY_1MS)
                                 delayloop_1ms:
0005b5 9701                      	sbiw r25:r24, 1
0005b6 f7f1                      	brne delayloop_1ms
                                 
0005b7 919f                      	pop r25
0005b8 918f                      	pop r24
0005b9 914f                      	pop	temp1
0005ba bf4f                      	out SREG, temp1
0005bb 914f                      	pop temp1
0005bc 9508                      	ret
                                 
                                 sleep_5ms:
0005bd dff0                      	rcall sleep_1ms
0005be dfef                      	rcall sleep_1ms
0005bf dfee                      	rcall sleep_1ms
0005c0 dfed                      	rcall sleep_1ms
0005c1 dfec                      	rcall sleep_1ms
0005c2 9508                      	ret
                                 
                                 sleep_halfsec:
0005c3 934f                      	push temp1
0005c4 b74f                      	in temp1, SREG
0005c5 934f                      	push temp1
0005c6 e644                      	ldi temp1, 100
                                 delayloop_halfsec:
0005c7 dff5                      	rcall sleep_5ms
0005c8 954a                      	dec temp1
0005c9 f7e9                      	brne delayloop_halfsec
0005ca 914f                      	pop	temp1
0005cb bf4f                      	out SREG, temp1
0005cc 914f                      	pop temp1
0005cd 9508                      	ret
                                 	


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :  91 z  :   1 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:   6 r17:  12 r18:   3 r19:   3 r20: 333 
r21: 188 r22:  97 r23:  34 r24:  32 r25:  32 r26:   0 r27:   0 r28:  38 
r29:  38 r30:   1 r31:   1 
Registers used: 16 out of 35 (45.7%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   4 and   :   1 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  80 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   1 brmi  :   0 
brne  :  15 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   5 cbr   :  20 
clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  34 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   4 cpc   :   0 
cpi   :  92 cpse  :   0 dec   :   6 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  10 inc   :   7 jmp   :  88 ld    :  12 ldd   :  22 ldi   : 229 
lds   :   5 lpm   :   1 lsl   :   2 lsr   :   0 mov   :  19 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :  26 or    :   0 
ori   :   1 out   :  21 pop   :  55 push  :  55 rcall : 158 ret   :   6 
reti  :   6 rjmp  :   9 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :   7 sbrc  :   5 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   2 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  27 std   :  30 sts   : 108 sub   :   0 subi  :   8 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 44 out of 116 (37.9%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b9c   2790      6   2796  262144   1.1%
[.dseg] 0x000200 0x00020e      0     14     14    8192   0.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
